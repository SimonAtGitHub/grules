def groovyArtifacts = ['org.codehaus.groovy:groovy-all:1.8.6', 'asm:asm:3.3.1']
def commonArtifacts = [
    'joda-time:joda-time:2.1+', 
    'com.google.inject:guice:3.0',
    'org.apache.tomcat:servlet-api:6.0.35+', 
    'org.codehaus.gpars:gpars:0.12+', 
    'javax.mail:mail:1.4.5+',
    'com.google.guava:guava:13.0'
    ]

apply plugin: 'groovy'
apply plugin: 'codenarc'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

defaultTasks 'build'

buildDir = 'bin'
group = 'org.grules'
version = '0.1'

sourceSets {
  local_ast
  test_scripts
  test_integration
}

configurations {
  excludedClasspathJars
}

project.ext {
  srcLibName = "${name}-src"
  buildLibDir = 'lib'
  configDir = 'config'
  codenarcConfigPath = "$configDir/codenarc.groovy"
  codenarcTestConfigPath = "$configDir/codenarc_test.groovy"
  groovyDocSources = [sourceSets.main.allGroovy, sourceSets.local_ast.allGroovy]
  groovyDocWindowTitle = 'Grules'
}

sourceSets*.output.each {it.classesDir = buildDir; it.resourcesDir = buildDir}

repositories {
  mavenCentral()
}

def testArtifacts = ['org.spockframework:spock-core:0.6-groovy-1.8', 'org.objenesis:objenesis:1.2']

dependencies {
  groovy groovyArtifacts
  local_astCompile groovyArtifacts
  compile commonArtifacts
  testCompile testArtifacts
  test_integrationCompile groovyArtifacts, commonArtifacts, testArtifacts
  test_scriptsCompile groovyArtifacts, commonArtifacts
}

task jar(type: Jar, overwrite: true) {
  destinationDir = file(project.buildLibDir)
  from buildDir
  excludes=['tmp']
}

compileLocal_astGroovy.dependsOn clean
compileGroovy.dependsOn compileLocal_astGroovy
compileTestGroovy.dependsOn jar
compileTest_scriptsGroovy.dependsOn processResources, compileTestGroovy
compileTest_integrationGroovy.dependsOn compileTest_scriptsGroovy, processTest_integrationResources

task sourcesJar(type: Jar) {
  classifier = 'sources'
  destinationDir = file(project.buildLibDir)
  from sourceSets.main.allSource
}

tasks.withType(CodeNarc).all { codeNarcTask ->
  codeNarcTask.configFile = file(project.codenarcConfigPath)
}

codenarcTest_scripts.configFile = file(project.codenarcTestConfigPath)
codenarcTest_integration.configFile = file(project.codenarcTestConfigPath)
codenarcTest.configFile = file(project.codenarcTestConfigPath)

task compileAll(dependsOn: [compileGroovy, compileTestGroovy, compileTest_integrationGroovy]) << {}

task testAll(type: Test) {
  dependsOn compileAll
  testClassesDir = file(buildDir)
}

task initProject << {
  sourceSets*.allSource.srcDirs.flatten().each {if (it.name != 'java') it.mkdirs()}
}

task initEclipseProject(dependsOn: [initProject, eclipseClasspath]) << {}

build.dependsOn = [testAll, check, sourcesJar, jar, groovydoc]

task wrapper(type: Wrapper) {
  gradleVersion = '1.0'
}

artifacts {
  archives jar
  archives sourcesJar
}

signing {
  sign configurations.archives
}

groovydoc.destinationDir = file('docs')
groovydoc.windowTitle = groovyDocWindowTitle
groovydoc.source groovyDocSources

task docsRelease(type:Groovydoc) {
  group = "Documentation"
  windowTitle = groovyDocWindowTitle
  description = 'Generates Groovydoc API documentation for the grules source code and copies it to the' +
      'github pages repository.'
  source sourceSets.main.allGroovy, sourceSets.local_ast.allGroovy
  destinationDir = file('../../ghpages/grules/docs')
  classpath = sourceSets.main.compileClasspath + sourceSets.local_ast.compileClasspath
}

task release(dependsOn: docsRelease) << {}

uploadArchives {
  repositories {
      mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signPom(deployment) }
          repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
          }
          pom.project {
             name 'Grules'
             packaging 'jar'
             description 'Grules is a rule engine written in Groovy'
             url 'http://grules.org'

             scm {
                 url 'scm:git@github.com:zhaber/grules.git'
                 connection 'scm:git@github.com:zhaber/grules.git'
                 developerConnection 'scm:git@github.com:zhaber/grules.git'
             }

             licenses {
                 license {
                     name 'GNU Lesser General Public License v3.0'
                     url 'http://www.gnu.org/licenses/lgpl.html'
                     distribution 'repo'
                 }
             }

             developers {
                 developer {
                     id 'zhaber'
                     name 'Vitalii Fedorenko'
                 }
             }
         }

         pom.withXml { XmlProvider xmlProvider ->
             def xml = xmlProvider.asString()
             def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))
             pomXml.version[0] + { packaging('jar') }
             def newXml = new StringWriter()
             def printer = new XmlNodePrinter(new PrintWriter(newXml))
             printer.preserveWhitespace = true
             printer.print(pomXml)
             xml.setLength(0)
             xml.append(newXml.toString())
         }
      }
  }
}
