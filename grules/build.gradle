def groovyArtifacts = ['org.codehaus.groovy:groovy-all:2.3.7']
def commonArtifacts = [
    'joda-time:joda-time:2.1+',
    'com.google.inject:guice:3.0',
    'org.apache.tomcat:servlet-api:6.0.35+',
    'org.codehaus.gpars:gpars:0.12+',
    'javax.mail:mail:1.4.5+',
    'com.google.guava:guava:13.0+'
    ] + groovyArtifacts

apply plugin: 'groovy'
apply plugin: 'codenarc'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

defaultTasks 'build'

buildDir = 'bin'
group = 'org.grules'
version = '0.2.3.7.2'

project.ext {
  releaseDir = 'release'
  configDir = 'config'
  ghpagesDir = '../../ghpages/grules'
  groovyDocsDir = "$ghpagesDir/docs"
  sonatypeRepositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
  codenarcConfigPath = "$configDir/codenarc.groovy"
  codenarcTestConfigPath = "$configDir/codenarc_test.groovy"
  groovyDocWindowTitle = 'Grules'
}

sourceSets {
  functions
  transformation
  test_scripts
  test_integration
}

configurations {
  excludedClasspathJars
}

if (hasProperty('ci')) {
  version += "-SNAPSHOT"
  project.sonatypeRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

sourceSets*.output.each {it.classesDir = buildDir; it.resourcesDir = buildDir}

repositories {
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
  mavenCentral()
}

def testArtifacts = ['org.spockframework:spock-core:0.7-groovy-2.0', 'org.objenesis:objenesis:1.2']

task classesJar(type: Jar, dependsOn: [classes, transformationClasses]) {
  destinationDir = file(releaseDir)
  from buildDir
  excludes=['tmp']
}

dependencies {
  compile commonArtifacts
  functionsCompile commonArtifacts
  transformationCompile commonArtifacts
  testCompile testArtifacts, files(classesJar.archivePath)
  test_integrationCompile commonArtifacts, testArtifacts
  test_scriptsCompile commonArtifacts
}

// jar {...} causes a bug with duplicated files
task jar(type: Jar, overwrite: true, dependsOn: classesJar) {}

task zipAll(type: Zip, dependsOn: jar) {
  classifier = 'all'
  from configurations.runtime
  from classesJar.archivePath
  destinationDir = file(releaseDir)
}

task copyZip(type:Copy, dependsOn: zipAll) {
  from zipAll.archivePath
  into ghpagesDir
  rename (zipAll.archiveName, 'grules-all.zip')
}

task tarAll(type: Tar, dependsOn: jar) {
  compression = Compression.GZIP
  classifier = 'all'
  from configurations.runtime
  from classesJar.archivePath
  destinationDir = file(releaseDir)
}

task copyTar(type:Copy, dependsOn: tarAll) {
  from tarAll.archivePath
  into ghpagesDir
  rename (tarAll.archiveName, 'grules-all.tar.gz')
}

compileGroovy.dependsOn clean
compileFunctionsGroovy.dependsOn compileGroovy
compileTransformationGroovy.dependsOn compileFunctionsGroovy
compileTestGroovy.dependsOn jar
compileTest_scriptsGroovy.dependsOn processResources, compileTestGroovy
compileTest_integrationGroovy.dependsOn compileTest_scriptsGroovy, processTest_integrationResources

task srcJar(type: Jar) {
  classifier = 'sources'
  destinationDir = file(releaseDir)
  from sourceSets.main.allSource
}

tasks.withType(CodeNarc).all { codeNarcTask ->
  codeNarcTask.configFile = file(codenarcConfigPath)
}

codenarcTest_scripts.configFile = file(codenarcTestConfigPath)
codenarcTest_integration.configFile = file(codenarcTestConfigPath)
codenarcTest.configFile = file(codenarcTestConfigPath)

task compileAll(dependsOn: [compileGroovy, compileTestGroovy, compileTest_integrationGroovy]) << {}

task testAll(type: Test) {
  dependsOn compileAll
  testClassesDir = file(buildDir)
}

task initProject << {
  sourceSets*.allSource.srcDirs.flatten().each {if (it.name != 'java') it.mkdirs()}
}

task initEclipseProject(dependsOn: [initProject, eclipseClasspath]) << {}

task wrapper(type: Wrapper) {
  gradleVersion = '2.1'
}

groovydoc.destinationDir = file('docs')
groovydoc.windowTitle = groovyDocWindowTitle

task groovydocJar(type: Jar, dependsOn: 'groovydoc') {
  classifier = 'javadoc'
  from groovydoc.destinationDir
  destinationDir = file(releaseDir)
}

build.dependsOn = [check, testAll, jar]

task cleanDocs(type:Delete) {
  delete groovyDocsDir
}

task docsRelease(type:Groovydoc, dependsOn: cleanDocs) {
  group = "Documentation"
  windowTitle = groovyDocWindowTitle
  description = 'Generates Groovydoc API documentation for the grules source code and copies it to the' +
      'github pages repository.'
  source sourceSets.main.allGroovy, sourceSets.functions.allGroovy, sourceSets.transformation.allGroovy
  destinationDir = file(groovyDocsDir)
  classpath = sourceSets.main.compileClasspath + sourceSets.functions.compileClasspath +
      sourceSets.transformation.compileClasspath
}

// for testing purposes
task dummy << {}

task copyJar(type: Copy, dependsOn: classesJar) {
  from classesJar.archivePath
  into libsDir
}

if (hasProperty('sonatypePassword')) {

	task release(dependsOn: [copyZip, copyTar, uploadArchives, docsRelease]) << {}

	signing {
	  sign srcJar
	  sign classesJar
	  sign groovydocJar
	}

	artifacts {
	  archives srcJar
	  archives groovydocJar
	}

	uploadArchives.dependsOn = [build, copyJar, groovydocJar, srcJar, signClassesJar, signGroovydocJar, signSrcJar]
	uploadArchives {
	  repositories {
		  mavenDeployer {
			  beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment); println deployment }
			  repository(url: sonatypeRepositoryUrl) {
				authentication(userName: 'zhaber', password: sonatypePassword)
			  }
			  pom.project {
				 name 'Grules'
				 packaging 'jar'
				 description 'Grules is a rule engine written in Groovy'
				 url 'http://grules.org'

				 scm {
					 url 'scm:git@github.com:zhaber/grules.git'
					 connection 'scm:git@github.com:zhaber/grules.git'
					 developerConnection 'scm:git@github.com:zhaber/grules.git'
				 }

				 licenses {
					 license {
						 name 'GNU Lesser General Public License v3.0'
						 url 'http://www.gnu.org/licenses/lgpl.html'
						 distribution 'repo'
					 }
				 }

				 developers {
					 developer {
						 id 'zhaber'
						 name 'Vitalii Fedorenko'
					 }
				 }
			 }

			 pom.withXml { XmlProvider xmlProvider ->
				 def xml = xmlProvider.asString()
				 def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))
				 pomXml.version[0] + { packaging('jar') }
				 def newXml = new StringWriter()
				 def printer = new XmlNodePrinter(new PrintWriter(newXml))
				 printer.preserveWhitespace = true
				 printer.print(pomXml)
				 xml.setLength(0)
				 xml.append(newXml.toString())
			 }
		  }
	  }
	}
}
