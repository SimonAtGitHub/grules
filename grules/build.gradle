apply plugin: 'groovy'
apply plugin: 'codenarc'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

defaultTasks 'build'

buildDir = 'bin'

group = 'org.grules'
version = '0.1'

sourceSets {
	local_ast
	test_scripts
	test_integration
}

configurations {
	excludedClasspathJars
}

project.ext {
	localAstLibName = "${name}-local-ast"
	srcLibName = "${name}-src"
	buildLibDir = 'lib'
	configDir = 'config'
	localAstLibPath = "$buildLibDir/${localAstLibName}.jar"
	codenarcConfigPath = "$configDir/codenarc.groovy"
	codenarcScriptsConfigPath = "$configDir/codenarc_scripts.groovy"
}

sourceSets*.output.each {it.classesDir = buildDir; it.resourcesDir = buildDir} 

repositories {
	mavenCentral()
}

def groovyArtifacts = ['org.codehaus.groovy:groovy-all:1.8.6', 'asm:asm:3.3.1']
def commonArtifacts = ['joda-time:joda-time:2.1+', 'com.google.inject:guice:3.0', 'com.google.guava:guava:11.0.2+', 
	                     'org.apache.tomcat:servlet-api:6.0.35+', 'org.codehaus.gpars:gpars:0.12+']
def testArtifacts = ['org.spockframework:spock-core:0.6-groovy-1.8', 'org.objenesis:objenesis:1.2']

task jarLocalAst(type: Jar, dependsOn: [compileLocal_astGroovy]) {
	baseName = project.localAstLibName
	destinationDir = file(project.project.buildLibDir)
	from buildDir
	exclude 'tmp'
}

dependencies {
  groovy groovyArtifacts
  local_astCompile groovyArtifacts
  compile commonArtifacts
	compile files(project.localAstLibPath) {
		builtBy 'jarLocalAst'
	}
  testCompile testArtifacts
	test_integrationCompile groovyArtifacts, commonArtifacts, testArtifacts
	test_scriptsCompile groovyArtifacts, commonArtifacts
	test_scriptsCompile files(project.localAstLibPath) {
		builtBy 'jarLocalAst'
	}
	excludedClasspathJars files(project.localAstLibPath)
}

compileLocal_astGroovy.dependsOn clean
compileGroovy.dependsOn jarLocalAst
compileTestGroovy.dependsOn processTestResources
compileTest_scriptsGroovy.dependsOn processResources, compileTestGroovy
compileTest_integrationGroovy.dependsOn compileTest_scriptsGroovy, processTest_integrationResources

task jar(type: Jar, overwrite: true, dependsOn: [cleanJar, processResources, compileGroovy]) {
	destinationDir = file(project.buildLibDir)
	from buildDir, zipTree(project.localAstLibPath)
	exclude 'tmp'
}

tasks.withType(CodeNarc).all { codeNarcTask ->
  codeNarcTask.configFile = file(project.codenarcConfigPath)
}

task jarSource(type: Jar, overwrite: true) {
	baseName = project.srcLibName
	destinationDir = file(project.buildLibDir)
	from sourceSets.main.groovy, sourceSets.main.resources, sourceSets.local_ast.groovy 
}

task compileAll(dependsOn: [compileGroovy, compileTestGroovy, compileTest_integrationGroovy]) << {
	project.delete project.localAstLibPath
}

task testAll(type: Test) {
	dependsOn compileAll
	testClassesDir = file(buildDir)
}

task initProject << {
	sourceSets*.allSource.srcDirs.flatten().each {if (it.name != 'java') it.mkdirs()}
}

codenarcTest_scripts.configFile = file(project.codenarcScriptsConfigPath)

eclipse {
	classpath {
		minusConfigurations += configurations.excludedClasspathJars
	}
}

task initEclipseProject(dependsOn: [initProject, eclipseClasspath]) << {}

build.dependsOn = [testAll, check, jarSource, jar]

task wrapper(type: Wrapper) {
	gradleVersion = '1.0'
}

artifacts {
	archives jar, jarSource
}

signing {
	sign configurations.archives
}

uploadArchives {
	repositories {
			mavenDeployer {
					beforeDeployment { MavenDeployment deployment -> signPom(deployment) }
					repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
						authentication(userName: sonatypeUsername, password: sonatypePassword)
					}
					pom.project {
						 name 'Grules'
						 packaging 'jar'
						 description 'Grules is a rule engine implemented in Groovy'
						 url 'http://grules.org'

						 scm {
								 url 'scm:git@github.com:zhaber/grules.git'
								 connection 'scm:git@github.com:zhaber/grules.git'
								 developerConnection 'scm:git@github.com:zhaber/grules.git'
						 }

						 licenses {
								 license {
										 name 'GNU Lesser General Public License v3.0'
										 url 'http://www.gnu.org/licenses/lgpl.html'
										 distribution 'repo'
								 }
						 }

						 developers {
								 developer {
										 id 'zhaber'
										 name 'Vitalii Fedorenko'
								 }
						 }
				 }

				 pom.withXml { XmlProvider xmlProvider ->
						 def xml = xmlProvider.asString()
						 def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))
						 pomXml.version[0] + { packaging('jar') }
						 def newXml = new StringWriter()
						 def printer = new XmlNodePrinter(new PrintWriter(newXml))
						 printer.preserveWhitespace = true
						 printer.print(pomXml)
						 xml.setLength(0)
						 xml.append(newXml.toString())
				 }
			}
	}
}